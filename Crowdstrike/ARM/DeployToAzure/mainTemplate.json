{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "type": "string",
            "metadata": {
                "description": "A globally unique name for the integration logic app"
            }
        },
        "SalemEventHubConnectionString": {
            "type": "securestring",
            "metadata": {
                "description": "The Connection String from the Salem 'alerts' Event Hub"
            }
        },
        "CS_CID": {
            "type": "string",
            "metadata": {
                "description": "The CID from the crowdstirke API, found in the CS portal"
            }
        },
        "CS_URL": {
            "type": "string",
            "metadata": {
                "description": "The base URL for your Crowdstrike API, found in the CS portal"
            }
        },
        "CS_SECRET_NAME": {
            "type": "string",
            "metadata": {
                "description": "The name of the CS secret in your keyvault.  NOT THE ACTUAL SECRET VALUE.  Please use a keyVault"
            }
        },
        "KeyVault_Name": {
            "type": "string",
            "metadata": {
                "description": "The name of the Keyvault where the CS secret is stored"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Location for all resources.  Leave blank to use location of resource group"
            }
        }
    },
    "variables": {
        "location": "[if(empty(parameters('location')), resourceGroup().location, parameters('location'))]",
        "SalemEventHubConnectionName": "Salem-EventHub",
        "SalemKeyVaultName": "Salem-Keyvault"
    },
    "resources": [
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[variables('location')]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "actions": {
                        "Alert_IDs": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "alert_ids",
                                        "type": "object",
                                        "value": {
                                            "composite_ids": "@body('Get_Alerts')['resources']"
                                        }
                                    }
                                ]
                            },
                            "runAfter": {
                                "Get_Alerts": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Get_Alerts": {
                            "inputs": {
                                "headers": {
                                    "authorization": "bearer @{body('Parse_token')?['access_token']}"
                                },
                                "method": "GET",
                                "queries": {
                                    "filter": "@{concat('created_timestamp:>=\"',triggerOutputs()['windowStartTime'],'\"+created_timestamp:<\"',triggerOutputs()['windowEndTime'],'\"')}"
                                },
                                "uri": "[concat(parameters('CS_URL'),'/alerts/queries/alerts/v1')]"
                            },
                            "runAfter": {
                                "Parse_token": [
                                    "Succeeded"
                                ]
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                },
                                "secureData": {
                                    "properties": [
                                        "inputs"
                                    ]
                                }
                            },
                            "type": "Http"
                        },
                        "Get_secret": {
                            "inputs": {
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['keyvault']['connectionId']"
                                    }
                                },
                                "method": "get",
                                "path": "/secrets/@{encodeURIComponent(parameters('cs_secret_name'))}/value"
                            },
                            "runAfter": {},
                            "type": "ApiConnection"
                        },
                        "If_Alerts": {
                            "actions": {
                                "Get_Details": {
                                    "inputs": {
                                        "body": "@string(variables('alert_ids'))",
                                        "headers": {
                                            "Accept": "application/json",
                                            "Content-Type": "application/json",
                                            "authorization": "bearer @{body('Parse_token')?['access_token']}"
                                        },
                                        "method": "POST",
                                        "uri": "[concat(parameters('CS_URL'),'/alerts/entities/alerts/v2')]"
                                    },
                                    "runtimeConfiguration": {
                                        "contentTransfer": {
                                            "transferMode": "Chunked"
                                        }
                                    },
                                    "type": "Http"
                                },
                                "Loop_Through_Alerts": {
                                    "actions": {
                                        "Send_event": {
                                            "inputs": {
                                                "body": {
                                                    "ContentData": "@{base64(variables('alert_formatted'))}"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['eventhubs']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/@{encodeURIComponent('alerts')}/events"
                                            },
                                            "runAfter": {
                                                "Set_Alert_Formatted": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "ApiConnection"
                                        },
                                        "Set_Alert_Formatted": {
                                            "inputs": {
                                                "name": "alert_formatted",
                                                "value": {
                                                    "alert": "@items('Loop_Through_Alerts')",
                                                    "alert_name": "@items('Loop_Through_Alerts')?['display_name']",
                                                    "id": "@items('Loop_Through_Alerts')?['id']",
                                                    "source": "crowdstrike"
                                                }
                                            },
                                            "type": "SetVariable"
                                        }
                                    },
                                    "foreach": "@body('Get_Details')['resources']",
                                    "runAfter": {
                                        "Get_Details": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Foreach"
                                }
                            },
                            "else": {
                                "actions": {
                                    "Terminate": {
                                        "inputs": {
                                            "runStatus": "Cancelled"
                                        },
                                        "type": "Terminate"
                                    }
                                }
                            },
                            "expression": {
                                "and": [
                                    {
                                        "greater": [
                                            "@length(body('Get_Alerts')['resources'])",
                                            0
                                        ]
                                    }
                                ]
                            },
                            "runAfter": {
                                "Initialize_Alert_Formatted": [
                                    "Succeeded"
                                ]
                            },
                            "type": "If"
                        },
                        "Initialize_Alert_Formatted": {
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "alert_formatted",
                                        "type": "object",
                                        "value": {}
                                    }
                                ]
                            },
                            "runAfter": {
                                "Alert_IDs": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable"
                        },
                        "Oauth": {
                            "inputs": {
                                "body": "@{concat('client_id=',parameters('client_id'),'&client_secret=',body('Get_secret')?['value'],'&grant_type=client_credentials')}",
                                "headers": {
                                    "Content-type": "application/x-www-form-urlencoded"
                                },
                                "method": "POST",
                                "uri": "[concat(parameters('CS_URL'),'/oauth2/token')]"
                            },
                            "runAfter": {
                                "Get_secret": [
                                    "Succeeded"
                                ]
                            },
                            "runtimeConfiguration": {
                                "contentTransfer": {
                                    "transferMode": "Chunked"
                                }
                            },
                            "type": "Http"
                        },
                        "Parse_token": {
                            "inputs": {
                                "content": "@body('Oauth')",
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string"
                                        },
                                        "expires_in": {
                                            "type": "integer"
                                        },
                                        "ext_expires_in": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            },
                            "runAfter": {
                                "Oauth": [
                                    "Succeeded"
                                ]
                            },
                            "runtimeConfiguration": {
                                "secureData": {
                                    "properties": [
                                        "inputs"
                                    ]
                                }
                            },
                            "type": "ParseJson"
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "outputs": {},
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "client_id": {
                            "defaultValue": "",
                            "type": "SecureString"
                        },
                        "cs_secret_name": {
                            "defaultValue": "",
                            "type": "SecureString"
                        }
                    },
                    "triggers": {
                        "Sliding_Window": {
                            "evaluatedRecurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "inputs": {
                                "delay": "PT20S"
                            },
                            "recurrence": {
                                "frequency": "Minute",
                                "interval": 5
                            },
                            "type": "SlidingWindow"
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "eventhubs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('SalemEventHubConnectionname'))]",
                                "connectionName": "[variables('SalemEventHubConnectionname')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/eventhubs')]"
                            },
                            "keyvault": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('SalemKeyVaultName'))]",
                                "connectionName": "[variables('SalemKeyVaultName')]",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/keyvault')]",
                                "connectionProperties": {
                                    "authentication": {
                                        "type": "ManagedServiceIdentity"
                                    }
                                }
                            }
                        }
                    },
                    "client_id": {
                        "value": "[parameters('CS_CID')]"
                    },
                    "cs_secret_name": {
                        "value": "[parameters('CS_SECRET_NAME')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('SalemEventHubConnectionname'))]",
                "[resourceId('Microsoft.Web/connections', variables('SalemKeyVaultName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('SalemEventHubConnectionname')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "Salem Event Hubs",
                "api": {
                    "name": "[variables('SalemEventHubConnectionname')]",
                    "displayName": "Salem Event Hubs",
                    "description": "Connect to The Salem Event Hub to send alerts.",
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('location'), '/managedApis/eventhubs')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValues": {
                    "connectionString": "[parameters('SalemEventHubConnectionString')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2018-07-01-preview",
            "name": "[variables('SalemKeyVaultName')]",
            "location": "[variables('location')]",
            "kind": "V1",
            "properties": {
                "displayName": "CS Secret",
                "api": {
                    "name": "[variables('SalemKeyVaultName')]",
                    "displayName": "Azure Key Vault",
                    "description": "Azure Key Vault is a service to securely store and access secrets.",
                    "iconUri": "[concat('https://connectoricons-prod.azureedge.net/releases/v1.0.1680/1.0.1680.3658/keyvault/icon.png')]",
                    "brandColor": "#0079d6",
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/',variables('location'),'/managedApis/keyvault')]",
                    "type": "Microsoft.Web/locations/managedApis"
                },
                "parameterValueSet": {
                    "name": "oauthMI",
                    "values": {
                        "vaultName": {
                            "value": "[parameters('KeyVault_Name')]"
                        }
                    }
                }
            }
        }
    ]
}